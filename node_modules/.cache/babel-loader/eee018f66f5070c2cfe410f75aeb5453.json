{"ast":null,"code":"var _jsxFileName = \"/Users/ra-be/tutorials/winran/serverless-app/src/components/songsLogic/Songlist.js\",\n    _s = $RefreshSig$();\n\nimport SongItem from \"./SongItem\";\nimport { useState, useEffect } from \"react\";\nimport SongFilter from \"./SongFilter\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Songlist = props => {\n  _s();\n\n  const [filteredArtist, setFilteredArtist] = useState('');\n\n  const filterChangeHandler = selectedArtist => {\n    setFilteredArtist(selectedArtist);\n  };\n\n  const [playingNow, setPlayNow] = useState(false);\n  const [fontWeight, setFontWeight] = useState('normal');\n\n  const clickHandler = song => {\n    setPlayNow(song);\n    setFontWeight('bold');\n    console.log('aaa');\n    console.log(playingNow);\n  };\n\n  const filteredSongList = props.songs.filter(song => {\n    return song.artist === filteredArtist;\n  });\n  let songsContent = props.songs;\n\n  if (filteredSongList.length > 0) {\n    songsContent = filteredSongList.map((song, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n      style: {\n        fontWeight: 'normal'\n      },\n      onClick: clickHandler,\n      children: /*#__PURE__*/_jsxDEV(SongItem, {\n        title: song.title,\n        artist: song.artist,\n        album: song.album,\n        duration: song.duration,\n        link: song.link,\n        like: song.like\n      }, song.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 132\n      }, this)\n    }, song.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 61\n    }, this));\n  } else {\n    songsContent = props.songs.map((song, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n      style: {\n        fontWeight: `${fontWeight}`\n      },\n      onClick: clickHandler,\n      children: /*#__PURE__*/_jsxDEV(SongItem, {\n        title: song.title,\n        artist: song.artist,\n        album: song.album,\n        duration: song.duration,\n        link: song.link,\n        like: song.like\n      }, song.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 134\n      }, this)\n    }, song.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 56\n    }, this));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    className: \"songList\",\n    children: [/*#__PURE__*/_jsxDEV(SongFilter, {\n      selected: filteredArtist,\n      onChangeFilter: filterChangeHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), songsContent]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Songlist, \"PzQ0LrAwxOHh6wETNIgxtWjLi3U=\");\n\n_c = Songlist;\nexport default Songlist;\n\nvar _c;\n\n$RefreshReg$(_c, \"Songlist\");","map":{"version":3,"sources":["/Users/ra-be/tutorials/winran/serverless-app/src/components/songsLogic/Songlist.js"],"names":["SongItem","useState","useEffect","SongFilter","Songlist","props","filteredArtist","setFilteredArtist","filterChangeHandler","selectedArtist","playingNow","setPlayNow","fontWeight","setFontWeight","clickHandler","song","console","log","filteredSongList","songs","filter","artist","songsContent","length","map","index","title","album","duration","link","like","id"],"mappings":"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","sourcesContent":["import SongItem from \"./SongItem\";\nimport {useState, useEffect} from \"react\";\nimport SongFilter from \"./SongFilter\";\n\n\nconst Songlist = (props) => {\n\n    const [filteredArtist, setFilteredArtist] = useState('')\n\n    const filterChangeHandler = (selectedArtist) => {\n        setFilteredArtist(selectedArtist);\n    };\n    const [playingNow, setPlayNow] = useState(false)\n    const [fontWeight,setFontWeight] = useState('normal')\n\n    const clickHandler = (song) => {\n        setPlayNow(song)\n        setFontWeight('bold')\n        console.log('aaa')\n        console.log(playingNow)\n\n\n    }\n\n\n    const filteredSongList = props.songs.filter(song => {\n        return song.artist === filteredArtist;\n    });\n\n    let songsContent = props.songs;\n    if (filteredSongList.length > 0) {\n        songsContent = filteredSongList.map((song,index) => <li key={song.id} style={{fontWeight:'normal'}} onClick={clickHandler}><SongItem\n            key={song.id}\n            title={song.title}\n            artist={song.artist}\n            album={song.album}\n            duration={song.duration}\n            link={song.link}\n            like={song.like}\n\n        />\n        </li>)\n    } else {\n        songsContent = props.songs.map((song,index) => <li key={song.id} style={{fontWeight:`${fontWeight}`}} onClick={clickHandler}><SongItem\n            key={song.id}\n            title={song.title}\n            artist={song.artist}\n            album={song.album}\n            duration={song.duration}\n            link={song.link}\n            like={song.like}\n\n        /></li>)\n    }\n    return (\n        <ul className=\"songList\">\n            <SongFilter\n                selected={filteredArtist}\n                onChangeFilter={filterChangeHandler}\n            />\n\n            {songsContent}\n\n        </ul>\n    );\n}\nexport default Songlist;"]},"metadata":{},"sourceType":"module"}