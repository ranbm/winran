{"ast":null,"code":"var _jsxFileName = \"/Users/ra-be/tutorials/winran/serverless-app/src/components/songsLogic/Songlist.js\",\n    _s = $RefreshSig$();\n\nimport SongItem from \"./SongItem\";\nimport { useState } from \"react\";\nimport SongFilter from \"./SongFilter\";\nimport './styles/Songlist.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Songlist = (props, handler) => {\n  _s();\n\n  const [rerender, setRerender] = useState(false);\n  const [filteredArtist, setFilteredArtist] = useState('');\n\n  const filterChangeHandler = selectedArtist => {\n    setFilteredArtist(selectedArtist);\n  };\n\n  const ChangePlayingNow = id => {\n    props.songs.map(song => song.id === id ? song.playNow = true : song.playNow = false);\n    setRerender(!rerender);\n  };\n\n  const filteredSongList = props.songs.filter(song => {\n    return song.artist === filteredArtist;\n  });\n  var songsContent;\n\n  if (filteredSongList.length > 0) {\n    songsContent = filteredSongList.map(song => /*#__PURE__*/_jsxDEV(\"li\", {\n      className: \"insonglist\",\n      onDoubleClick: () => ChangePlayingNow(song.id),\n      children: /*#__PURE__*/_jsxDEV(SongItem, {\n        title: song.title,\n        artist: song.artist,\n        album: song.album,\n        duration: song.duration,\n        link: song.link,\n        like: song.like,\n        playNow: song.playNow\n      }, song.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }, this)\n    }, song.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this));\n  } else {\n    /*#__PURE__*/\n    _jsxDEV(\"table\", {\n      children: [\"songsContent = props.songs.map((song) => \", /*#__PURE__*/_jsxDEV(\"tr\", {\n        className: \"insonglist\",\n        onDoubleClick: () => ChangePlayingNow(song.id),\n        children: /*#__PURE__*/_jsxDEV(SongItem, {\n          title: song.title,\n          artist: song.artist,\n          album: song.album,\n          duration: song.duration,\n          link: song.link,\n          like: song.like,\n          playNow: song.playNow\n        }, song.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 140\n        }, this)\n      }, song.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 50\n      }, this), \")\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(SongFilter, {\n      selected: filteredArtist,\n      onChangeFilter: filterChangeHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"songList\",\n      children: songsContent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Songlist, \"VRnL7otiQThtwvvOMLuVoHQDRI0=\");\n\n_c = Songlist;\nexport default Songlist;\n\nvar _c;\n\n$RefreshReg$(_c, \"Songlist\");","map":{"version":3,"sources":["/Users/ra-be/tutorials/winran/serverless-app/src/components/songsLogic/Songlist.js"],"names":["SongItem","useState","SongFilter","Songlist","props","handler","rerender","setRerender","filteredArtist","setFilteredArtist","filterChangeHandler","selectedArtist","ChangePlayingNow","id","songs","map","song","playNow","filteredSongList","filter","artist","songsContent","length","title","album","duration","link","like"],"mappings":"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","sourcesContent":["import SongItem from \"./SongItem\";\nimport {useState} from \"react\";\nimport SongFilter from \"./SongFilter\";\nimport './styles/Songlist.css'\n\n\nconst Songlist = (props, handler) => {\n    const [rerender, setRerender] = useState(false);\n    const [filteredArtist, setFilteredArtist] = useState('')\n\n    const filterChangeHandler = (selectedArtist) => {\n        setFilteredArtist(selectedArtist);\n    };\n\n    const ChangePlayingNow = (id) =>{\n\n        props.songs.map((song) => song.id === id ? song.playNow=true: song.playNow=false)\n        setRerender(!rerender)\n\n    }\n\n\n    const filteredSongList = props.songs.filter(song => {\n        return song.artist === filteredArtist;\n    });\n\n    var songsContent;\n    if (filteredSongList.length > 0) {\n        songsContent = filteredSongList.map((song) =>\n            <li key={song.id} className='insonglist' onDoubleClick={() => ChangePlayingNow(song.id)}>\n            <SongItem\n            key={song.id}\n            title={song.title}\n            artist={song.artist}\n            album={song.album}\n            duration={song.duration}\n            link={song.link}\n            like={song.like}\n            playNow={song.playNow}\n\n        />\n        </li>)\n    } else {\n        <table>\n        songsContent = props.songs.map((song) => <tr key={song.id} className='insonglist' onDoubleClick={() => ChangePlayingNow(song.id)} ><SongItem\n            key={song.id}\n            title={song.title}\n            artist={song.artist}\n            album={song.album}\n            duration={song.duration}\n            link={song.link}\n            like={song.like}\n            playNow={song.playNow}\n\n        /></tr>)</table>\n    }\n    return (\n        <div>\n        <SongFilter\n                selected={filteredArtist}\n                onChangeFilter={filterChangeHandler}\n            />\n        <ul className=\"songList\">\n\n\n            {songsContent}\n\n        </ul></div>\n    );\n}\nexport default Songlist;"]},"metadata":{},"sourceType":"module"}