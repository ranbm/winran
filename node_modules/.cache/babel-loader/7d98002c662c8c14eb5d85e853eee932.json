{"ast":null,"code":"var _jsxFileName = \"/Users/ra-be/tutorials/winran/serverless-app/src/components/songsLogic/Songlist.js\",\n    _s = $RefreshSig$();\n\nimport SongItem from \"./SongItem\";\nimport { useState, useEffect } from \"react\";\nimport SongFilter from \"./SongFilter\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Songlist = props => {\n  _s();\n\n  const [filteredArtist, setFilteredArtist] = useState('');\n\n  const filterChangeHandler = selectedArtist => {\n    setFilteredArtist(selectedArtist);\n  };\n\n  const [playingNow, setPlayNow] = useState(false);\n  const [fontWeight, setFontWeight] = useState('normal');\n\n  const clickHandler = index => {\n    setPlayNow(song);\n    setFontWeight('bold');\n    console.log('aaa');\n    console.log(playingNow);\n  };\n\n  const filteredSongList = props.songs.filter(song => {\n    return song.artist === filteredArtist;\n  });\n  let songsContent = props.songs;\n\n  if (filteredSongList.length > 0) {\n    songsContent = filteredSongList.map(song => /*#__PURE__*/_jsxDEV(\"li\", {\n      onClick: () => this.clickHandler(i),\n      style: this.state.selected.includes(i) ? {\n        fontWeight: \"normal\"\n      } : {\n        fontWeight: \"bold\"\n      },\n      children: /*#__PURE__*/_jsxDEV(SongItem, {\n        title: song.title,\n        artist: song.artist,\n        album: song.album,\n        duration: song.duration,\n        link: song.link,\n        like: song.like\n      }, song.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this)\n    }, song.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 55\n    }, this));\n  } else {\n    songsContent = props.songs.map(song => /*#__PURE__*/_jsxDEV(\"li\", {\n      style: {\n        fontWeight: `${fontWeight}`\n      },\n      onClick: clickHandler,\n      children: /*#__PURE__*/_jsxDEV(SongItem, {\n        title: song.title,\n        artist: song.artist,\n        album: song.album,\n        duration: song.duration,\n        link: song.link,\n        like: song.like\n      }, song.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 128\n      }, this)\n    }, song.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 50\n    }, this));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    className: \"songList\",\n    children: [/*#__PURE__*/_jsxDEV(SongFilter, {\n      selected: filteredArtist,\n      onChangeFilter: filterChangeHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), songsContent]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Songlist, \"PzQ0LrAwxOHh6wETNIgxtWjLi3U=\");\n\n_c = Songlist;\nexport default Songlist;\n\nvar _c;\n\n$RefreshReg$(_c, \"Songlist\");","map":{"version":3,"sources":["/Users/ra-be/tutorials/winran/serverless-app/src/components/songsLogic/Songlist.js"],"names":["SongItem","useState","useEffect","SongFilter","Songlist","props","filteredArtist","setFilteredArtist","filterChangeHandler","selectedArtist","playingNow","setPlayNow","fontWeight","setFontWeight","clickHandler","index","song","console","log","filteredSongList","songs","filter","artist","songsContent","length","map","i","state","selected","includes","title","album","duration","link","like","id"],"mappings":"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","sourcesContent":["import SongItem from \"./SongItem\";\nimport {useState, useEffect} from \"react\";\nimport SongFilter from \"./SongFilter\";\n\n\nconst Songlist = (props) => {\n\n    const [filteredArtist, setFilteredArtist] = useState('')\n\n    const filterChangeHandler = (selectedArtist) => {\n        setFilteredArtist(selectedArtist);\n    };\n    const [playingNow, setPlayNow] = useState(false)\n    const [fontWeight,setFontWeight] = useState('normal')\n\n    const clickHandler = (index) => {\n        setPlayNow(song)\n        setFontWeight('bold')\n        console.log('aaa')\n        console.log(playingNow)\n        \n\n    }\n\n\n    const filteredSongList = props.songs.filter(song => {\n        return song.artist === filteredArtist;\n    });\n\n    let songsContent = props.songs;\n    if (filteredSongList.length > 0) {\n        songsContent = filteredSongList.map((song) => <li key={song.id}\n              onClick={() => this.clickHandler(i)}\n              style={\n                this.state.selected.includes(i)\n                  ? { fontWeight: \"normal\" }\n                  : { fontWeight: \"bold\" }\n              }><SongItem\n            key={song.id}\n            title={song.title}\n            artist={song.artist}\n            album={song.album}\n            duration={song.duration}\n            link={song.link}\n            like={song.like}\n\n        />\n        </li>)\n    } else {\n        songsContent = props.songs.map((song) => <li key={song.id} style={{fontWeight:`${fontWeight}`}} onClick={clickHandler}><SongItem\n            key={song.id}\n            title={song.title}\n            artist={song.artist}\n            album={song.album}\n            duration={song.duration}\n            link={song.link}\n            like={song.like}\n\n        /></li>)\n    }\n    return (\n        <ul className=\"songList\">\n            <SongFilter\n                selected={filteredArtist}\n                onChangeFilter={filterChangeHandler}\n            />\n\n            {songsContent}\n\n        </ul>\n    );\n}\nexport default Songlist;"]},"metadata":{},"sourceType":"module"}